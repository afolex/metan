(in-package :hunch)

(defparameter *instr-list*
  '( ("Внимательно прочитайте инструкцию.")
;    ('(format nil "2. Количество вопросов теста - ~A ." num-of-question))
    ("Каждый пункт теста состоит из двух частей:"
     "- начало предложения (выделено жирным шрифтом)"
     "- и пять вариантов окончания.")
    ("В каждом пункте теста перед каждым вариантом ответа - поле для ввода числа от 1 до 5.")
    ("Поставьте цифру \"1\" в поле напротив того варианта ответа, который Вам подходит больше всего из всех пяти вариантов окончаний.")
    ("Поставьте 2 в поле напротив того варианта ответа, который Вам подходит больше всего из оставшихся. И так далее...")
    ("Поставьте 5 в поле напротив того варианта ответа, который Вам подходит меньше всего.")
    ("Выполните данную процедуру для каждого пункта теста.")
    ("Если при заполнении анкеты ИНДИКАТОР сменил цвет с красного на зелёный, значит колонку с ответами на этот вопрос Вы заполнили правильно. Если же индикатор остался красным, значит в заполнении есть ошибка. Проверьте анкету ВНИМАТЕЛЬНО перед сохранением на наличие красных индикаторов.")))

(defmacro make-instruction% (ilist num-of-question)
  `(with-html-output (*standard-output*)
     (:p :class "instr-header" "Инструкция по заполнению.")
     ,@(loop for item1 in ilist
	   for i from 1
	   ;; do (loop for elt in item1
	   ;; 	 for j from 1
		
		 collect `(:p :class "num-list" ,item1)
	
		   ;; )
	    )
     ))
(defun make-instruction (ilist num-of-question)
  (with-html-output (*standard-output*)
    (:p :class "instr-header" "Инструкция по заполнению.")
     (loop for item1 in ilist
	   for i from 1
	   do (loop for elt in item1
	   	 for j from 1
		
		 do (if (= j 1)
			(htm (:p :class "num-list" (esc (fmt (format nil "~A. ~A" i elt)))))
			(htm (:p :class "num-list" (esc (fmt elt)))))
	
		   )
	    )
     ))
